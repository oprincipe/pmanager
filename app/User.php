<?php

namespace App;

use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Illuminate\Support\Facades\DB;
use Laravel\Passport\HasApiTokens;

class User extends Authenticatable
{
    use Notifiable;
    use HasApiTokens;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
	    'first_name',
	    'middle_name',
	    'last_name',
	    'email',
	    'password',
	    'city',
		'role_id',
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];


    public function fullName()
    {
    	return $this->first_name." ".$this->last_name;
    }

    public function __toString()
    {
	    return $this->fullName();
    }

	/*
	 * User can has many:
	 * - companies
	 */
	public function companies()
	{
		return $this->hasMany('App\Company');
	}


	/**
	 * The user belong to a role
	 */
	public function role()
	{
		return $this->belongsTo('App\Role');
	}


	/**
	 * A user belongs to many tasks
	 * Laravel search for a Model named TaskUser
	 */
	public function tasks()
	{
		return $this->belongsToMany("App\Task");
	}

	/**
	 * A user belongs to many projects
	 * Laravel search for a Model named CustomerProject
	 */
	public function projects()
	{
		return $this->belongsToMany("App\Project");
	}

	public function assigned_projects()
    {
        return \App\Project::where("user_id", $this->id)
            ->whereIn("id", function ($query) {
                $query->select("project_id")
                    ->from("project_user")
                    ->where("user_id", $this->id);
            }, "or");
    }

    /**
     * @return \App\Task array
     */
    public function assigned_tasks(array $task_status_ids = null, $group_by = false)
    {
        if(empty($task_status_ids)) {
            //$where_ids = " (".implode(",", $task_status_ids).") ";
            $task_status_ids = TaskStatus::getIds();
        }

        if($group_by) {
            return \App\Task::where("user_id", $this->id)
                ->where(function($query) use ($task_status_ids) {
                    $query->whereIn("status_id", $task_status_ids)
                        ->whereIn("id", function ($query) {
                            $query->select("project_id")
                                ->from("task_user")
                                ->where("user_id", $this->id);
                        }, "or");
                })
                ->groupBy("status_id")
                ->get(['*', DB::raw('count(tasks.id) as totals')]);
        }
        else {
            return \App\Task::where("user_id", $this->id)
                ->where(function($query) use ($task_status_ids) {
                    $query->whereIn("status_id", $task_status_ids)
                        ->whereIn("id", function ($query) {
                            $query->select("project_id")
                                ->from("task_user")
                                ->where("user_id", $this->id);
                        }, "or");
                });

        }
    }



	public function comments()
	{
		return $this->morphToMany("App\Comment", "commentable");
	}


	/**
	 * A user could have many customers
	 *
	 * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany
	 */
	public function customers()
	{
		return $this->hasMany("App\Customer");
	}


	public function delete()
	{
		//Delete comments
		$this->comments()->delete();

		//Delete customers
		$this->customers()->delete();

		return parent::delete(); // TODO: Change the autogenerated stub
	}
}
